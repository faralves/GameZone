@using GameZone.News.WebApp.Models.DTO.Response;
@using X.PagedList.Mvc.Core;
@using X.PagedList.Web.Common;
@using X.PagedList;
@model IPagedList<CreateNewsDTO>
@using Microsoft.AspNetCore.Http
@using GameZone.News.WebApp.Extensions
@using GameZone.WebAPI.Core.Usuario
@inject IAspNetUser AppUser
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

@{
    // Configurações do PagedListRenderOptions
    var renderOptions = new PagedListRenderOptions
            {
                DisplayLinkToFirstPage = PagedListDisplayMode.IfNeeded,
                DisplayLinkToLastPage = PagedListDisplayMode.IfNeeded,
                DisplayLinkToPreviousPage = PagedListDisplayMode.IfNeeded,
                DisplayLinkToNextPage = PagedListDisplayMode.IfNeeded,
                DisplayLinkToIndividualPages = false,
                DisplayPageCountAndCurrentLocation = true,
                MaximumPageNumbersToDisplay = 5,
                PageCountAndCurrentLocationFormat = "  Página {0} de {1}.  ",
                ItemSliceAndTotalFormat = "Exibindo {0} - {1} de {2} itens.",
                LinkToPreviousPageFormat = "« Anterior  ",
                LinkToNextPageFormat = "  Próxima »",
                LinkToFirstPageFormat = "«« Primeira  ",
                LinkToLastPageFormat = "  Última »»",
                EllipsesFormat = "[...]",
                ClassToApplyToFirstListItemInPager = null,
                ClassToApplyToLastListItemInPager = null,
                ContainerDivClasses = new[] { "pagination" },
                UlElementClasses = new[] { "pagination" },
                LiElementClasses = Enumerable.Empty<string>()
            };
}

<h2>Gerenciamento das Postagens</h2>

<form asp-action="Index" asp-controller="News" method="get" role="form" asp-route-returnurl="@ViewData["ReturnUrl"]" class="m-t">

    @if (HttpContextAccessor?.HttpContext?.User.Identity?.IsAuthenticated == true && HttpContextAccessor.HttpContext.User.HasClaim(c => c.Type == "PodeInserirNoticia" && c.Value == "true"))
    {
        <p><a class="btn btn-success" asp-action="Create">Criar um novo Post</a></p>
    }

    @if (Model.Any())
    {
        <div class="table-responsive">
            <table class="table table-striped table-bordered table-hover">
                <thead class="table-light">
                    <tr>
                        <th class="AlinhamentoCentralizado">Id</th>
                        <th class="AlinhamentoCentralizado" style="width: 165px !important">Título</th>
                        <th class="AlinhamentoCentralizado">Descrição</th>
                        <th class="AlinhamentoCentralizado" style="width: 135px !important">Autor</th>
                        <th class="AlinhamentoCentralizado" style="width: 145px !important">Data Publicação</th>
                        <th class="AlinhamentoCentralizado" style="width: 145px !important">Data Atualização</th>
                        @if (HttpContextAccessor?.HttpContext?.User.Identity?.IsAuthenticated == true && (HttpContextAccessor.HttpContext.User.HasClaim(c => c.Type == "PodeEditarNoticia" && c.Value == "true") || HttpContextAccessor.HttpContext.User.HasClaim(c => c.Type == "PodeExcluirNoticia" && c.Value == "true")))
                        {

                            <th style="width: 153px !important;"></th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var post in Model)
                    {
                        <tr>
                            <td class="AlinhamentoCentralizado">@post.Id</td>
                            <td style="vertical-align: middle">@post.Titulo</td>
                            <td style="vertical-align: middle">@post.Descricao</td>
                            <td style="vertical-align: middle">@post.Autor</td>
                            <td style="vertical-align: middle">@post.DataPublicacao.ToString("dd/MM/yyyy HH:mm")</td>
                            @if (@post.DataAtualizacao.HasValue)
                            {
                                <td style="vertical-align: middle">@post.DataAtualizacao.Value.ToString("dd/MM/yyyy HH:mm")</td>
                            }
                            else
                            {
                                <td></td>
                            }

                            @if (HttpContextAccessor?.HttpContext?.User.Identity?.IsAuthenticated == true && (HttpContextAccessor.HttpContext.User.HasClaim(c => c.Type == "PodeEditarNoticia" && c.Value == "true") || HttpContextAccessor.HttpContext.User.HasClaim(c => c.Type == "PodeExcluirNoticia" && c.Value == "true")))
                            {
                                <td class="AlinhamentoCentralizado">
                                    @if (HttpContextAccessor?.HttpContext?.User.Identity?.IsAuthenticated == true && HttpContextAccessor.HttpContext.User.HasClaim(c => c.Type == "PodeEditarNoticia" && c.Value == "true"))
                                    {
                                        <a class="btn btn-warning" asp-action="Edit" asp-route-id="@post.Id">Edit</a> <label> | </label>
                                    }
                                    @if (HttpContextAccessor?.HttpContext?.User.Identity?.IsAuthenticated == true && HttpContextAccessor.HttpContext.User.HasClaim(c => c.Type == "PodeExcluirNoticia" && c.Value == "true"))
                                    {
                                        <a class="btn btn-danger" asp-action="Delete" asp-route-id="@post.Id">Delete</a>
                                    }
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="text-center">
            @Html.PagedListPager(Model, page => Url.Action("Index", new { page }), renderOptions)
        </div>
    }
    else
    {
        <p>Não foram encontrados notícias.</p>
    }
</form>